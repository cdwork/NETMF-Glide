<?xml version="1.0" encoding="utf-8" ?>
<example>
  Create a new .NET Micro Framework project using the Console Application template and call it "Test".
  Next, open Resources.resx, select Add Resource and click Add New Text File.
  In the prompt, name the new resource "Window" and click Add.
  Now, copy the XML below and paste it into the file and save.
  <code>
    <![CDATA[
<Glide>
  <Window Name="window" Width="320" Height="240" BackColor="dce3e7">
    <DataGrid Name="dataGrid" X="5" Y="5" Width="310" Height="150" Alpha="255" Font="4" RowCount="5" RowHeight="30" Draggable="True" TappableCells="True" SortableHeaders="True" ShowHeaders="True" ShowScrollbar="True" ScrollbarWidth="5" HeadersBackColor="707476" HeadersFontColor="FFFFFF" ItemsBackColor="FFFFFF" ItemsAltBackColor="F4F4F4" ItemsFontColor="000000" SelectedItemBackColor="FFF299" SelectedItemFontColor="000000" GridColor="BFC5C9" ScrollbarBackColor="C0C0C0" ScrollbarScrubberColor="000000"/>
    <TextBlock Name="textBlock1" X="5" Y="160" Width="50" Height="32" Alpha="255" Text="Scroll" TextAlign="Right" TextVerticalAlign="Middle" Font="3" FontColor="000000"/>
    <TextBlock Name="textBlock2" X="5" Y="202" Width="50" Height="32" Alpha="255" Text="Select" TextAlign="Right" TextVerticalAlign="Middle" Font="3" FontColor="000000"/>
    <TextBlock Name="textBlock3" X="175" Y="160" Width="40" Height="32" Alpha="255" Text="List" TextAlign="Right" TextVerticalAlign="Middle" Font="3" FontColor="000000"/>
    <Button Name="scrollUpBtn" X="60" Y="160" Width="45" Height="32" Alpha="255" Text="Up" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="scrollDownBtn" X="110" Y="160" Width="60" Height="32" Alpha="255" Text="Down" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="selectUpBtn" X="60" Y="202" Width="45" Height="32" Alpha="255" Text="Up" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="selectDownBtn" X="110" Y="202" Width="60" Height="32" Alpha="255" Text="Down" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="selectClearBtn" X="175" Y="202" Width="50" Height="32" Alpha="255" Text="Clear" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="selectDeleteBtn" X="230" Y="202" Width="70" Height="32" Alpha="255" Text="Delete" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="clearBtn" X="220" Y="160" Width="50" Height="32" Alpha="255" Text="Clear" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
    <Button Name="fillBtn" X="275" Y="160" Width="40" Height="32" Alpha="255" Text="Fill" Font="3" FontColor="000000" DisabledFontColor="808080" TintColor="000000" TintAmount="0"/>
  </Window>
</Glide>
    ]]>
  </code>
  Open Program.cs and replace the code with the code below:
  <code>
    <![CDATA[
using System;
using System.Threading;

using GHI.Glide;
using GHI.Glide.Display;
using GHI.Glide.UI;

namespace Test
{
    public class Program
    {
        // This will hold the main window.
        static Window window;

        // Data Grid
        static DataGrid dataGrid;

        public static void Main()
        {
            // Load the window
            window = GlideLoader.LoadWindow(Resources.GetString(Resources.StringResources.Window));

            // Activate touch
            GlideTouch.Initialize();

            // Initialize the window.
            InitWin();

            // Assigning a window to MainWindow flushes it to the screen.
            // This also starts event handling on the window.
            Glide.MainWindow = window;

            Thread.Sleep(-1);
        }

        static void InitWin()
        {
            // Setup the dataGrid reference.
            dataGrid = (DataGrid)window.GetChildByName("dataGrid");

            // Possible configurations...
            //dataGrid.ShowHeaders = false;
            //dataGrid.SortableHeaders = false;
            //dataGrid.TappableCells = false;
            //dataGrid.Draggable = false;
            //dataGrid.ShowScrollbar = false;
            //dataGrid.ScrollbarWidth = 4;

            // Listen for tap cell events.
            dataGrid.TapCellEvent += new OnTapCell(dataGrid_TapCellEvent);

            // Create our three columns.
            dataGrid.AddColumn(new DataGridColumn("ID", 50));
            dataGrid.AddColumn(new DataGridColumn("First Name", 125));
            dataGrid.AddColumn(new DataGridColumn("Last Name", 125));

            // Populate the data grid with random data.
            Populate(false);

            // Add the data grid to the window before rendering it.
            window.AddChild(dataGrid);
            dataGrid.Render();

            // Setup the button controls.

            Button scrollUpBtn = (Button)window.GetChildByName("scrollUpBtn");
            scrollUpBtn.TapEvent += new OnTap(scrollUpBtn_TapEvent);

            Button scrollDownBtn = (Button)window.GetChildByName("scrollDownBtn");
            scrollDownBtn.TapEvent += new OnTap(scrollDownBtn_TapEvent);

            Button selectUpBtn = (Button)window.GetChildByName("selectUpBtn");
            selectUpBtn.TapEvent += new OnTap(selectUpBtn_TapEvent);

            Button selectDownBtn = (Button)window.GetChildByName("selectDownBtn");
            selectDownBtn.TapEvent += new OnTap(selectDownBtn_TapEvent);

            Button selectClearBtn = (Button)window.GetChildByName("selectClearBtn");
            selectClearBtn.TapEvent += new OnTap(selectClearBtn_TapEvent);

            Button selectDeleteBtn = (Button)window.GetChildByName("selectDeleteBtn");
            selectDeleteBtn.TapEvent += new OnTap(selectDeleteBtn_TapEvent);
            
            Button clearBtn = (Button)window.GetChildByName("clearBtn");
            clearBtn.TapEvent += new OnTap(clearBtn_TapEvent);

            Button fillBtn = (Button)window.GetChildByName("fillBtn");
            fillBtn.TapEvent += new OnTap(fillBtn_TapEvent);
        }

        static void Populate(bool invalidate)
        {
            // Add items with random data
            for (int i = 0; i < 20; i++)
            {
                // DataGridItems must contain an object array whose length matches the number of columns.
                dataGrid.AddItem(new DataGridItem(new object[3] { i, RandomString(10), RandomString(10) }));
            }

            if (invalidate)
                dataGrid.Invalidate();
        }

        static void dataGrid_TapCellEvent(object sender, TapCellEventArgs args)
        {
            // Get the data from the row we tapped.
            object[] data = dataGrid.GetRowData(args.RowIndex);
            if (data != null)
                GlideUtils.Debug.Print("GetRowData[" + args.RowIndex + "] = ", data);
        }

        static void scrollUpBtn_TapEvent(object sender)
        {
            dataGrid.ScrollUp(1);
            dataGrid.Invalidate();
        }

        static void scrollDownBtn_TapEvent(object sender)
        {
            dataGrid.ScrollDown(1);
            dataGrid.Invalidate();
        }

        static void selectUpBtn_TapEvent(object sender)
        {
            if (dataGrid.SelectedIndex > 0)
                dataGrid.SelectedIndex--;
        }

        static void selectDownBtn_TapEvent(object sender)
        {
            if (dataGrid.SelectedIndex < dataGrid.NumItems - 1)
                dataGrid.SelectedIndex++;
        }

        static void selectClearBtn_TapEvent(object sender)
        {
            dataGrid.SelectedIndex = -1;
        }

        static void selectDeleteBtn_TapEvent(object sender)
        {
            dataGrid.RemoveItemAt(dataGrid.SelectedIndex);
            dataGrid.Invalidate();
        }

        static void clearBtn_TapEvent(object sender)
        {
            dataGrid.Clear();
            dataGrid.Invalidate();
        }

        static void fillBtn_TapEvent(object sender)
        {
            Populate(true);
        }

        // -------------------------------------------------------------------
        // This is used to generate random strings.
        private static Random random = new Random((int)DateTime.Now.Ticks);
        private static string RandomString(int size)
        {
            string str = String.Empty;
            double d;
            ushort u;
            char ch;
            for (int i = 0; i < size; i++)
            {
                d = System.Math.Floor(26 * random.NextDouble() + 65);
                u = Convert.ToUInt16(d.ToString());
                ch = Convert.ToChar(u);
                str += ch;
            }

            return str;
        }

    }
}
    ]]>
  </code>
  Before we run it, we must add the Glide reference by right-clicking References and selecting Add Reference.
  In the new window select the Browse tab, locate GHI.Glide and click Ok.
  Now that everything is ready, press F5 to run the example.
</example>
